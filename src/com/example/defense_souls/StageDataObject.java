package com.example.defense_souls;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import android.graphics.Bitmap;
import android.util.Log;

public class StageDataObject {

    private int cellx;
    private int celly;
    private int statusData[][];
    private int animationCount[][];
    private int animationChange[][];
    private int animationChangeCount[][];
    private int animationChangeCountMax[][];
    private boolean pathData[][];
    private boolean enemyData[][];
    private int areaData[][];
    private int imageData[][];
    private int moveData[][];
    private int virtualMoveData[][];
    private int virtualAreaData[][];
    private boolean virtualPathData[][];
    
    private int enemybaseMax;
    private int enemybaseType[];
    private int enemybaseX[];
    private int enemybaseY[];
    private int difficulty;
    private int bossNo;
    private int bossbaseX;
    private int bossbaseY;
    
    private int mybaseX;
    private int mybaseY;
    
    private int sizeX;
    private int sizeY;
    private int dispX;
    private int dispY;
    private float dispSizeX;
    private float dispSizeY;
    private float dispHarfSizeX;
    private float dispHarfSizeY;
    private int dispOffSizeX;
    private int dispOffSizeY;

    private int canvasX;
    private int canvasY;
    private int canvasXAdjustMIN;
    private int canvasXAdjustMAX;
    private int canvasYAdjustMIN;
    private int canvasYAdjustMAX;
    
    private int numberImageNo;
    private int iconImageNo;
    private int bgmBattle;
    private int bgmBoss;
    private List<StageEffectObject> StageEffectlist;
    
    public StageDataObject(Background background, int stageNo, int stagelevel) {
        
        this.bossNo = 0;
        this.difficulty = 0;
        StageEffectlist = new ArrayList<StageEffectObject>();
        
        switch (stageNo) {
            case 1: // 大平原
                numberImageNo = Common.IMAGE_NUMBER001;
                iconImageNo = R.drawable.stageicon001;
                bgmBattle = R.raw.battle000;
                bgmBoss = 0;
                difficulty = 1;
                int stage0[][] = {{0,0,0,0,0,0,0,201,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,-1,-1,-1,-1,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,-1,-1,-1,-1,-1,0,0,0,0,0,}
                ,{0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,0,0,0,0,}
                ,{0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,0,0,0,0,}
                ,{0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,}
                ,{0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,}
                ,{0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,}
                ,{0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,}
                ,{0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,}
                ,{0,0,0,0,0,-1,-1,11,-1,-1,-1,-1,-1,-1,-1,0,}
                ,{0,0,0,0,0,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,0,}
                ,{0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,}
                ,{0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,}
                ,{0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,}
                ,{0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                };
                cellx = 15;
                celly = 19;
                datainitSet();
                adjustSet(background);
                stageSet(stage0);
                cloudsEffectSet();
                break;
                
            case 2: // 三つの道標
                numberImageNo = Common.IMAGE_NUMBER001;
                iconImageNo = R.drawable.stageicon002;
                bgmBattle = R.raw.battle000;
                bgmBoss = R.raw.boss000;
                difficulty = 10;
                int stage1[][] = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,212,0,0,0,0,0,0,0,0,0,0,0,0,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,-1,0,0,-1,-1,-1,-1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,-1,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,-1,-1,-1,-1,0,-1,0,0,0,0,0,0,-1,0,0,-1,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,-1,-1,-1,-1,0,-1,0,0,0,0,-1,-1,-1,-1,0,-1,0,-1,-1,-1,-1,0,0,0,0,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,-1,-1,-1,0,0,-1,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,213,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                };
                cellx = 43;
                celly = 25;
                datainitSet();
                adjustSet(background);
                stageSet(stage1);
                cloudsEffectSet();
                break;
                
            case 3: // 最前線
                numberImageNo = Common.IMAGE_NUMBER001;
                iconImageNo = R.drawable.stageicon003;
                bgmBattle = R.raw.battle000;
                bgmBoss = R.raw.boss000;
                difficulty = 30;
                int stage2[][] = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,-1,-1,-1,0,0,0,-1,-1,-1,-1,-1,221,-1,-1,-1,0,224,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,-1,-1,-1,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,-1,-1,-1,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,-1,-1,-1,-1,-1,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,}
                ,{0,0,0,-1,-1,222,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,}
                ,{0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,}
                ,{0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,}
                ,{0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,41,-1,-1,223,-1,-1,0,0,0,0,0,0,0,0,}
                ,{0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,}
                ,{0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,41,-1,-1,-1,0,0,0,0,0,0,0,0,}
                ,{0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,41,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                };
                cellx = 29;
                celly = 25;
                datainitSet();
                adjustSet(background);
                stageSet(stage2);
                cloudsEffectSet();
                break;
                
            case 4: // 略奪されし鉱山
                numberImageNo = Common.IMAGE_NUMBER001;
                iconImageNo = R.drawable.stageicon004;
                bgmBattle = R.raw.battle001;
                bgmBoss = 0;
                difficulty = 20;
                int stage3[][] = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,231,-1,-1,-1,-1,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,-1,-1,-1,-1,0,0,0,0,0,0,0,-1,-1,-1,0,-1,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,-1,-1,0,0,-1,-1,-1,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,0,0,102,102,102,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,101,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,101,0,0,0,0,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                };
                cellx = 29;
                celly = 21;
                datainitSet();
                adjustSet(background);
                stageSet(stage3);
                cloudsEffectSet();
                break;
            case 5: // 結晶洞窟
                numberImageNo = Common.IMAGE_NUMBER001;
                iconImageNo = R.drawable.stageicon005;
                bgmBattle = R.raw.battle001;
                bgmBoss = R.raw.boss000;
                difficulty = 30;
                int stage4[][] = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,-1,-1,241,-1,-1,242,-1,-1,243,-1,-1,26,-1,-1,-1,-1,-1,-1,-1,243,0,0,0,0,}
                ,{0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,}
                ,{0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,-1,-1,-1,-1,31,31,31,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,-1,-1,-1,31,31,31,31,-1,26,-1,-1,26,-1,26,-1,-1,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,-1,-1,-1,31,31,244,31,31,-1,-1,-1,-1,1,-1,-1,-1,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,26,-1,-1,31,244,245,244,31,31,-1,26,-1,-1,-1,26,-1,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,-1,-1,-1,31,31,244,31,31,31,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,-1,-1,-1,-1,31,31,31,31,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,-1,-1,-1,-1,-1,31,31,-1,-1,-1,-1,26,-1,-1,-1,-1,0,0,0,0,0,0,0,}
                ,{0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,26,-1,-1,-1,26,-1,-1,26,-1,-1,0,0,0,0,0,0,0,}
                ,{0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,}
                ,{0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,26,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,241,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,242,-1,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                };
                cellx = 29;
                celly = 21;
                datainitSet();
                adjustSet(background);
                stageSet(stage4);
                break;

            case 6: // 森
                numberImageNo = Common.IMAGE_NUMBER001;
                iconImageNo = R.drawable.stageicon006;
                bgmBattle = R.raw.battle002;
                bgmBoss = 0;
                difficulty = 20;
                int stage5[][] = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,11,0,0,0,0,0,0,11,0,0,0,0,0,0,0,11,0,0,0,0,0,11,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,11,0,0,0,0,0,12,0,0,0,0,0,}
                ,{0,0,11,251,-1,-1,-1,12,-1,-1,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,-1,-1,252,0,0,}
                ,{0,0,0,0,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,12,-1,-1,-1,-1,-1,11,-1,-1,0,0,0,0,}
                ,{0,11,0,12,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,11,-1,-1,-1,12,-1,-1,-1,-1,0,12,0,0,}
                ,{0,0,11,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,12,-1,0,0,0,0,}
                ,{0,0,0,0,-1,-1,12,-1,-1,-1,-1,-1,-1,11,-1,-1,-1,12,-1,-1,-1,-1,-1,0,11,0,0,}
                ,{0,0,0,0,12,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,-1,-1,-1,12,-1,-1,0,0,0,0,}
                ,{0,12,0,0,-1,-1,-1,-1,11,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,-1,-1,12,0,0,0,0,}
                ,{0,0,11,0,-1,-1,-1,-1,-1,-1,12,-1,-1,1,-1,-1,-1,-1,11,-1,-1,-1,-1,0,0,0,0,}
                ,{0,0,0,0,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,11,0,0,0,0,}
                ,{0,11,0,0,-1,-1,12,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,-1,-1,-1,11,-1,-1,0,12,0,0,}
                ,{0,0,0,0,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,12,0,0,0,0,}
                ,{0,0,0,254,-1,-1,-1,11,-1,-1,-1,-1,11,-1,-1,12,-1,-1,-1,-1,11,-1,-1,0,0,11,0,}
                ,{0,0,0,0,-1,-1,-1,-1,11,-1,-1,11,-1,-1,-1,-1,-1,11,-1,-1,-1,-1,253,0,0,0,0,}
                ,{0,0,0,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,-1,-1,-1,-1,0,0,0,0,}
                ,{0,11,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,12,0,11,0,0,}
                ,{0,0,0,0,0,12,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,12,0,0,11,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,11,0,0,11,0,0,}
                ,{0,0,0,0,0,11,0,0,0,0,11,0,0,11,0,0,0,0,11,0,0,0,0,0,0,0,}
                };
                cellx = 26;
                celly = 21;
                datainitSet();
                adjustSet(background);
                stageSet(stage5);

                break;
                
            case 7: // 守護者
                numberImageNo = Common.IMAGE_NUMBER001;
                iconImageNo = R.drawable.stageicon007;
                bgmBattle = R.raw.battle002;
                bgmBoss = R.raw.boss000;
                difficulty = 30;
                int stage6[][] = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,261,-1,-1,-1,28,-1,-1,-1,27,-1,-1,-1,261,0,0,0,0,0,}
                ,{0,0,0,0,0,0,-1,-1,-1,12,-1,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,0,0,0,0,}
                ,{0,0,0,0,0,0,12,-1,-1,-1,-1,-1,-1,262,-1,-1,-1,-1,-1,12,-1,0,0,0,0,}
                ,{0,0,0,0,0,0,-1,-1,-1,-1,-1,27,-1,-1,-1,27,-1,-1,-1,-1,-1,0,0,0,0,}
                ,{0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,}
                ,{0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,12,0,0,}
                ,{0,0,0,0,0,12,-1,-1,-1,-1,-1,27,-1,-1,-1,28,-1,-1,-1,-1,-1,0,0,0,0,}
                ,{0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,}
                ,{0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,0,0,0,0,}
                ,{0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                };
                cellx = 24;
                celly = 21;
                datainitSet();
                adjustSet(background);
                stageSet(stage6);

                break;
                
            case 8: // 死者の都
                numberImageNo = Common.IMAGE_NUMBER001;
                iconImageNo = R.drawable.stageicon008;
                bgmBattle = R.raw.battle003;
                bgmBoss = 0;
                difficulty = 20;
                int stage7[][] = {{0,0,0,0,0,0,0,0,0,0,0,271,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,273,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,-1,-1,-1,0,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,0,0,}
                ,{0,0,0,0,0,0,-1,-1,-1,0,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,-1,-1,-1,0,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,0,0,}
                ,{0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,}
                ,{0,0,0,0,0,0,0,-1,-1,0,-1,-1,-1,0,-1,-1,-1,-1,272,-1,-1,0,0,}
                ,{0,0,0,0,0,0,-1,-1,-1,0,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,-1,1,-1,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                };
                cellx = 22;
                celly = 21;
                datainitSet();
                adjustSet(background);
                stageSet(stage7);

                break;
                
            case 9: // 亡国の王
                numberImageNo = Common.IMAGE_NUMBER001;
                iconImageNo = R.drawable.stageicon009;
                bgmBattle = R.raw.battle003;
                bgmBoss = R.raw.boss001;
                difficulty = 30;
                int stage8[][] = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,283,-1,-1,-1,-1,-1,0,0,0,0,}
                ,{0,0,0,0,0,282,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,282,0,}
                ,{0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,-1,-1,0,-1,-1,-1,0,-1,-1,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,-1,-1,0,-1,-1,-1,0,-1,-1,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,}
                ,{0,0,0,0,0,281,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,281,0,}
                ,{0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                };
                cellx = 22;
                celly = 21;
                datainitSet();
                adjustSet(background);
                stageSet(stage8);
                break;
                
            case 10: // 魔境
                numberImageNo = Common.IMAGE_NUMBER001;
                iconImageNo = R.drawable.stageicon010;
                bgmBattle = R.raw.battle004;
                bgmBoss = 0;
                difficulty = 40;
                int stage9[][] = {{0,0,0,0,0,0,0,0,0,0,-1,292,-1,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,291,0,0,}
                ,{0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,0,-1,-1,-1,-1,0,0,}
                ,{0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,}
                ,{0,0,0,0,0,0,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,}
                ,{0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,291,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                };
                cellx = 20;
                celly = 21;
                datainitSet();
                adjustSet(background);
                stageSet(stage9);

                break;
                
            case 11: // 竜の巣
                numberImageNo = Common.IMAGE_NUMBER001;
                iconImageNo = R.drawable.stageicon011;
                bgmBattle = R.raw.battle004;
                bgmBoss = R.raw.boss002;
                difficulty = 50;
                int stage10[][] = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,303,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,301,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,31,31,31,31,-1,-1,-1,-1,-1,-1,-1,-1,-1,301,31,31,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,31,31,31,31,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,31,31,31,31,0,0,0,0,0,0,}
                ,{0,0,31,31,31,31,31,31,31,-1,-1,-1,-1,-1,-1,-1,-1,-1,31,31,31,31,31,31,0,0,0,0,0,}
                ,{0,0,31,31,31,31,31,31,-1,-1,-1,-1,-1,-1,-1,-1,-1,31,31,31,31,31,31,31,31,0,0,0,0,}
                ,{0,0,31,31,31,31,31,31,-1,-1,-1,-1,-1,-1,-1,-1,31,31,31,31,31,31,31,31,31,0,0,0,0,}
                ,{0,0,31,31,31,31,31,31,-1,-1,-1,-1,-1,-1,-1,-1,31,31,31,31,31,31,31,31,31,0,0,0,0,}
                ,{0,0,31,31,31,31,31,31,31,-1,-1,-1,-1,-1,-1,31,31,31,31,31,31,31,31,31,31,31,31,0,0,}
                ,{0,31,31,31,31,31,31,31,31,-1,-1,-1,-1,-1,-1,-1,31,31,31,31,31,31,31,31,31,31,31,302,0,}
                ,{302,31,31,31,31,31,31,31,31,-1,-1,-1,-1,-1,-1,-1,-1,31,31,31,31,31,31,31,31,31,31,0,0,}
                ,{0,0,31,31,31,31,31,31,31,-1,-1,-1,-1,1,-1,-1,-1,-1,31,31,31,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                ,{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,}
                };
                cellx = 28;
                celly = 21;
                datainitSet();
                adjustSet(background);
                stageSet(stage10);

                break;
        }
    }
    
    // 読み込んだステージデータに合わせて各オブジェクトをセット
    public void stageSet(int stage[][]) {
        int enemybaseCount = 0;
        
        for (int y = 0 ; y < celly ; y++) {
            for (int x = 0 ; x < cellx ; x++) {
                switch (stage[y][x]) {
                case 0: // 進入禁止
                    objectSet(x, y, Common.AREA_NO, 0, 0, 0);
                    break;
                case 1: // 味方拠点
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_MYBASE, 0);
                    mybaseX = x;
                    mybaseY = y;
                    break;
                case 2: // 進入可能の再設定
                    objectSet(x, y, Common.AREA_OK, 0, 0, 0);
                    break;
                    
                case 11:    // 木
                    objectSet(x, y, Common.AREA_NO, Common.IMAGE_OBJECT001, Common.AREA_SHADOW, 0);
                    break;
                case 12:    // 巨木
                    objectSet(x, y, Common.AREA_NO, Common.IMAGE_OBJECT002, Common.AREA_SHADOW, 0);
                    objectSet(x-1, y, Common.AREA_OK, 0, Common.AREA_SHADOW, 0);
                    objectSet(x+1, y, Common.AREA_OK, 0, Common.AREA_SHADOW, 0);
                    objectSet(x, y-1, Common.AREA_OK, 0, Common.AREA_SHADOW, 0);
                    objectSet(x-1, y-1, Common.AREA_OK, 0, Common.AREA_SHADOW, 0);
                    objectSet(x+1, y-1, Common.AREA_OK, 0, Common.AREA_SHADOW, 0);
                    break;
                case 13:    // 枯れ木
                    objectSet(x, y, Common.AREA_NO, Common.IMAGE_OBJECT004, Common.AREA_SHADOW, 0);
                    break;
                case 21:    // 岩
                    objectSet(x, y, Common.AREA_NO, Common.IMAGE_OBJECT011, Common.AREA_SHADOW, 0);
                    break;
                case 22:    // 大岩
                    objectSet(x, y, Common.AREA_NO, Common.IMAGE_OBJECT012, Common.AREA_SHADOW, 0);
                    objectSet(x-1, y, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x+1, y, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x, y-1, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x-1, y-1, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x+1, y-1, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    break;
                case 23:    // 白岩
                    objectSet(x, y, Common.AREA_NO, Common.IMAGE_OBJECT013, Common.AREA_SHADOW, 0);
                    break;
                case 24:    // 白大岩
                    objectSet(x, y, Common.AREA_NO, Common.IMAGE_OBJECT014, Common.AREA_SHADOW, 0);
                    objectSet(x-1, y, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x+1, y, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x, y-1, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x-1, y-1, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x+1, y-1, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    break;
                case 26:    // クリスタル
                    objectSet(x, y, Common.AREA_NO, Common.IMAGE_OBJECT016, Common.AREA_SHADOW, 0);
                    break;
                    
                case 27:    // 石柱１
                    objectSet(x, y, Common.AREA_NO, Common.IMAGE_OBJECT017, Common.AREA_SHADOW, 0);
                    break;
                case 28:    // 石柱２
                    objectSet(x, y, Common.AREA_NO, Common.IMAGE_OBJECT018, Common.AREA_SHADOW, 0);
                    break;
                    
                case 31:    // 床なし
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_NOGROUND, 0);
                    break;
                    
                case 32:    // ダメージ床
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_DAMAGE, 0);
                    break;
                    
                case 41:    // 焚火
                    objectSet(x, y, Common.AREA_NO, Common.IMAGE_OBJECT031, 0, 1);
                    animationSet(x, y, 10, 3);
                    break;
                    
                case 101:    // 爆発大岩
                    objectSet(x, y, Common.AREA_NO, Common.IMAGE_OBJECT012, Common.AREA_SHADOW, 4);
                    objectSet(x-1, y, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x+1, y, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x, y-1, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x-1, y-1, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x+1, y-1, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    break;
                    
                case 102:    // 爆発大岩スイッチ
                    objectSet(x, y, Common.AREA_OK, 0, 0, 3);
                    break;
                    
                case 121:
                    StageEffectlist.add(new StageEffectObject(1, x * Common.CELLSIZE_X, Common.CELLSIZE_Y));
                    break;
                case 122:
                    StageEffectlist.add(new StageEffectObject(2, x * Common.CELLSIZE_X, Common.CELLSIZE_Y));
                    break;
                case 123:
                    StageEffectlist.add(new StageEffectObject(3, x * Common.CELLSIZE_X, Common.CELLSIZE_Y));
                    break;
                    
                case 201: // 大平原敵拠点1
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    enemybaseType[enemybaseCount] = Common.ENEMYBASE_TYPE001;
                    enemybaseX[enemybaseCount] = x;
                    enemybaseY[enemybaseCount] = y;
                    enemybaseCount++;
                    break;
                    
                case 211: // 三つの道標敵拠点1
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    enemybaseType[enemybaseCount] = Common.ENEMYBASE_TYPE011;
                    enemybaseX[enemybaseCount] = x;
                    enemybaseY[enemybaseCount] = y;
                    enemybaseCount++;
                    bossNo = 34;
                    bossbaseX = x;
                    bossbaseY = y;
                    break;
                case 212: // 三つの道標敵拠点2
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    enemybaseType[enemybaseCount] = Common.ENEMYBASE_TYPE012;
                    enemybaseX[enemybaseCount] = x;
                    enemybaseY[enemybaseCount] = y;
                    enemybaseCount++;
                    break;
                case 213: // 三つの道標敵拠点3
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    enemybaseType[enemybaseCount] = Common.ENEMYBASE_TYPE013;
                    enemybaseX[enemybaseCount] = x;
                    enemybaseY[enemybaseCount] = y;
                    enemybaseCount++;
                    break;
                    
                case 221: // 最前線敵拠点1（テント）
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    objectSet(x, y-1, Common.AREA_NO, Common.IMAGE_OBJECT021, 0, 0);
                    objectSet(x-1, y-1, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x+1, y-1, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x, y-2, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x-1, y-2, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x+1, y-2, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    enemybaseType[enemybaseCount] = Common.ENEMYBASE_TYPE021;
                    enemybaseX[enemybaseCount] = x;
                    enemybaseY[enemybaseCount] = y;
                    enemybaseCount++;
                    bossNo = 4;
                    bossbaseX = x;
                    bossbaseY = y;
                    break;
                case 222: // 最前線敵拠点2（テント）
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    objectSet(x, y-1, Common.AREA_NO, Common.IMAGE_OBJECT021, 0, 0);
                    objectSet(x-1, y-1, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x+1, y-1, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x, y-2, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x-1, y-2, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x+1, y-2, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    enemybaseType[enemybaseCount] = Common.ENEMYBASE_TYPE022;
                    enemybaseX[enemybaseCount] = x;
                    enemybaseY[enemybaseCount] = y;
                    enemybaseCount++;
                    break;
                case 223: // 最前線敵拠点3（テント）
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    objectSet(x, y-1, Common.AREA_NO, Common.IMAGE_OBJECT021, 0, 0);
                    objectSet(x-1, y-1, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x+1, y-1, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x, y-2, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x-1, y-2, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x+1, y-2, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    enemybaseType[enemybaseCount] = Common.ENEMYBASE_TYPE023;
                    enemybaseX[enemybaseCount] = x;
                    enemybaseY[enemybaseCount] = y;
                    enemybaseCount++;
                    break;
                case 224: // 最前線敵拠点(池)
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    enemybaseType[enemybaseCount] = Common.ENEMYBASE_TYPE024;
                    enemybaseX[enemybaseCount] = x;
                    enemybaseY[enemybaseCount] = y;
                    enemybaseCount++;
                    break;
                    
                 
                case 231:   // 略奪されし鉱山敵拠点
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    enemybaseType[enemybaseCount] = Common.ENEMYBASE_TYPE031;
                    enemybaseX[enemybaseCount] = x;
                    enemybaseY[enemybaseCount] = y;
                    enemybaseCount++;
                    break;
                case 232:   // 略奪されし鉱山敵拠点(岩破壊後)
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    enemybaseType[enemybaseCount] = Common.ENEMYBASE_TYPE032;
                    enemybaseX[enemybaseCount] = x;
                    enemybaseY[enemybaseCount] = y;
                    enemybaseCount++;
                    break;
                    
                case 241: // 結晶洞窟敵拠点1
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    enemybaseType[enemybaseCount] = Common.ENEMYBASE_TYPE041;
                    enemybaseX[enemybaseCount] = x;
                    enemybaseY[enemybaseCount] = y;
                    enemybaseCount++;
                    break;
                case 242: // 結晶洞窟敵拠点2
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    enemybaseType[enemybaseCount] = Common.ENEMYBASE_TYPE042;
                    enemybaseX[enemybaseCount] = x;
                    enemybaseY[enemybaseCount] = y;
                    enemybaseCount++;
                    break;
                case 243: // 結晶洞窟敵拠点3
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    enemybaseType[enemybaseCount] = Common.ENEMYBASE_TYPE043;
                    enemybaseX[enemybaseCount] = x;
                    enemybaseY[enemybaseCount] = y;
                    enemybaseCount++;
                    break;
                case 244: // 結晶洞窟敵拠点4
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    enemybaseType[enemybaseCount] = Common.ENEMYBASE_TYPE044;
                    enemybaseX[enemybaseCount] = x;
                    enemybaseY[enemybaseCount] = y;
                    enemybaseCount++;
                    break;
                case 245: // 結晶洞窟敵拠点5
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    bossNo = 14;
                    bossbaseX = x;
                    bossbaseY = y;
                    break;
                    
                case 251: // 魔の森敵拠点1
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    enemybaseType[enemybaseCount] = Common.ENEMYBASE_TYPE051;
                    enemybaseX[enemybaseCount] = x;
                    enemybaseY[enemybaseCount] = y;
                    enemybaseCount++;
                    break;
                case 252: // 魔の森敵拠点2
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    enemybaseType[enemybaseCount] = Common.ENEMYBASE_TYPE052;
                    enemybaseX[enemybaseCount] = x;
                    enemybaseY[enemybaseCount] = y;
                    enemybaseCount++;
                    break;
                case 253: // 魔の森敵拠点3
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    enemybaseType[enemybaseCount] = Common.ENEMYBASE_TYPE053;
                    enemybaseX[enemybaseCount] = x;
                    enemybaseY[enemybaseCount] = y;
                    enemybaseCount++;
                    break;
                case 254: // 魔の森敵拠点4
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    enemybaseType[enemybaseCount] = Common.ENEMYBASE_TYPE054;
                    enemybaseX[enemybaseCount] = x;
                    enemybaseY[enemybaseCount] = y;
                    enemybaseCount++;
                    break;
                    
                case 261: // 守護者敵拠点1
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    enemybaseType[enemybaseCount] = Common.ENEMYBASE_TYPE061;
                    enemybaseX[enemybaseCount] = x;
                    enemybaseY[enemybaseCount] = y;
                    enemybaseCount++;
                    break;
                case 262: // 守護者敵拠点2（墓）
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    objectSet(x, y-1, Common.AREA_NO, Common.IMAGE_OBJECT023, 0, 0);
                    objectSet(x-1, y-1, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x+1, y-1, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x, y-2, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x-1, y-2, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x+1, y-2, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    bossNo = 62;
                    bossbaseX = x;
                    bossbaseY = y;
                    break;
                    
                case 271: // 死者の都敵拠点1
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    enemybaseType[enemybaseCount] = Common.ENEMYBASE_TYPE071;
                    enemybaseX[enemybaseCount] = x;
                    enemybaseY[enemybaseCount] = y;
                    enemybaseCount++;
                    break;
                case 272: // 死者の都敵拠点2（墓）
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    objectSet(x, y-1, Common.AREA_NO, Common.IMAGE_OBJECT023, 0, 0);
                    objectSet(x-1, y-1, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x+1, y-1, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x, y-2, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x-1, y-2, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x+1, y-2, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    enemybaseType[enemybaseCount] = Common.ENEMYBASE_TYPE072;
                    enemybaseX[enemybaseCount] = x;
                    enemybaseY[enemybaseCount] = y;
                    enemybaseCount++;
                    break;
                case 273: // 死者の都敵拠点3（墓）
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    objectSet(x, y-1, Common.AREA_NO, Common.IMAGE_OBJECT023, 0, 0);
                    objectSet(x-1, y-1, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x+1, y-1, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x, y-2, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x-1, y-2, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    objectSet(x+1, y-2, Common.AREA_NO, 0, Common.AREA_SHADOW, 0);
                    enemybaseType[enemybaseCount] = Common.ENEMYBASE_TYPE073;
                    enemybaseX[enemybaseCount] = x;
                    enemybaseY[enemybaseCount] = y;
                    enemybaseCount++;
                    break;
                    
                case 281: // 亡国の王敵拠点1
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    enemybaseType[enemybaseCount] = Common.ENEMYBASE_TYPE081;
                    enemybaseX[enemybaseCount] = x;
                    enemybaseY[enemybaseCount] = y;
                    enemybaseCount++;
                    break;
                case 282: // 亡国の王敵拠点2
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    enemybaseType[enemybaseCount] = Common.ENEMYBASE_TYPE082;
                    enemybaseX[enemybaseCount] = x;
                    enemybaseY[enemybaseCount] = y;
                    enemybaseCount++;
                    break;
                case 283: // 亡国の王敵拠点3
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    objectSet(x, y-1, Common.AREA_NO, Common.IMAGE_OBJECT024, Common.AREA_SHADOW, 0);
                    bossNo = 64;
                    bossbaseX = x;
                    bossbaseY = y;
                    break;
                    
                case 291: // 魔境敵拠点1（クリスタル）
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    objectSet(x, y-1, Common.AREA_NO, Common.IMAGE_OBJECT026, Common.AREA_SHADOW, 0);
                    enemybaseType[enemybaseCount] = Common.ENEMYBASE_TYPE091;
                    enemybaseX[enemybaseCount] = x;
                    enemybaseY[enemybaseCount] = y;
                    enemybaseCount++;
                    break;
                case 292: // 魔境敵拠点2
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    enemybaseType[enemybaseCount] = Common.ENEMYBASE_TYPE092;
                    enemybaseX[enemybaseCount] = x;
                    enemybaseY[enemybaseCount] = y;
                    enemybaseCount++;
                    break;
                    
                case 301: // 竜の巣敵拠点1
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    enemybaseType[enemybaseCount] = Common.ENEMYBASE_TYPE101;
                    enemybaseX[enemybaseCount] = x;
                    enemybaseY[enemybaseCount] = y;
                    enemybaseCount++;
                    break;
                case 302: // 竜の巣敵拠点2
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    enemybaseType[enemybaseCount] = Common.ENEMYBASE_TYPE102;
                    enemybaseX[enemybaseCount] = x;
                    enemybaseY[enemybaseCount] = y;
                    enemybaseCount++;
                    break;
                case 303: // 竜の巣敵拠点3
                    objectSet(x, y, Common.AREA_OK, 0, Common.AREA_ENEMYBASE, 0);
                    bossNo = 81;
                    bossbaseX = x;
                    bossbaseY = y;
                    break;
                }
            }
        }
        enemybaseMax = enemybaseCount;
    }
    
    // 読み込んだステージデータに合わせて各オブジェクトをセット
    public void cloudsEffectSet() {
        Random rnd;
        int r;
        int cx = (canvasX*2) / 600;
        int cy = (canvasY*2) / 400;
        
        for (int y = 0 ; y < cy ; y++) {
            for (int x = 0 ; x < cx ; x++) {
                rnd = new Random();
                r = rnd.nextInt(100);
                if (r > 70) {
                    r = rnd.nextInt(3);
                    StageEffectlist.add(new StageEffectObject(r+1, x * 600, y * 400));
                }
            }
        }
    }
    
    // オブジェクトデータをセット
    public void objectSet(int x, int y, boolean path, int imageNo, int area, int status) {
        pathData[x][y] = path;
        imageData[x][y] = imageNo;
        areaData[x][y] = area;
        statusData[x][y] = status;
    }
    
    // オブジェクトアニメーションをセット
    public void animationSet(int x, int y, int change, int max) {
        animationChange[x][y] = change;
        animationChangeCountMax[x][y] = max;
    }

    // 各オブジェクトデータの初期化
    public void datainitSet() {
        statusData = new int[cellx][celly];
        animationCount = new int[cellx][celly];
        animationChange = new int[cellx][celly];
        animationChangeCount = new int[cellx][celly];
        animationChangeCountMax = new int[cellx][celly];
        pathData = new boolean[cellx][celly];
        enemyData = new boolean[cellx][celly];
        areaData = new int[cellx][celly];
        imageData = new int[cellx][celly];
        moveData = new int[cellx][celly];
        virtualPathData = new boolean[cellx][celly];
        virtualMoveData = new int[cellx][celly];
        virtualAreaData = new int[cellx][celly];
        enemybaseType = new int[20];
        enemybaseX = new int[20];
        enemybaseY = new int[20];
        for (int x = 0; x < cellx; x++) {
            for (int y = 0 ; y < celly ; y++) {
                pathData[x][y] = Common.AREA_OK;
                imageData[x][y] = 0;
                statusData[x][y] = 0;
            }
        }
    }
    
    // 画面サイズとスクロール限界をセット
    public void adjustSet(Background background) {
        
        // 縦横のサイズに応じて補正値をセット
        this.dispOffSizeX = (int)(cellx * Common.CELLHARFSIZE_X)/2;
        this.dispOffSizeY = (int)(celly * Common.CELLHARFSIZE_Y)/2;
        Log.v("x",""+dispOffSizeX);
        Log.v("y",""+dispOffSizeY);
        
        // 縦横のスクロールの最大値と最小値のセット
        canvasXAdjustMAX = (int) (background.getDispSizeX()-this.dispOffSizeX-background.getPositionX());
        canvasYAdjustMAX = (int) (background.getDispSizeY()-this.dispOffSizeY-background.getPositionY());
        canvasXAdjustMIN = (int) (-background.getDispSizeX()-this.dispOffSizeX+background.getPositionX());
        canvasYAdjustMIN = (int) (-background.getDispSizeY()-this.dispOffSizeY+background.getPositionY());
        canvasX = (int)background.getSizeX();
        canvasY = (int)background.getSizeY();
    }
    
    // 通行データのアップデート
    public boolean updateMoveData(int moveData[][], boolean pathData[][]) {
        int dir;
        int count = 1;
        setMoveDataClear(moveData);
        moveData[mybaseX][mybaseY] = count;
        
        while (true) {
            dir = 0;
            for (int x = 0 ; x < cellx ; x++) {
                for (int y = 0 ; y < celly ; y++) {
                    if (moveData[x][y] == count) {
                        dir += setMoveData(x, y, -1, 0, count, moveData, pathData);
                        dir += setMoveData(x, y, 0, -1, count, moveData, pathData);
                        dir += setMoveData(x, y, 1, 0, count, moveData, pathData);
                        dir += setMoveData(x, y, 0, 1, count, moveData, pathData);
                    }
                }
            }
            if (dir == 0) {
                boolean baseFlg = true;
                for (int x = 0 ; x < cellx ; x++) {
                    for (int y = 0 ; y < celly ; y++) {
                        // 敵の経路を塞いだ場合
                        if (pathData[x][y] == Common.AREA_OK && enemyData[x][y] == Common.AREA_ENEMY) {
                            if (moveData[x][y] == 0) {
                                baseFlg = false;
                            }
                        }
                        // 敵の拠点までの経路を塞いだ場合
                        if (areaData[x][y] == Common.AREA_ENEMYBASE) {
                            if (moveData[x][y] == 0) {
                                baseFlg = false;
                            }
                        }
                    }
                }

                if (baseFlg == true) {
                    return true;
                } else {
                    return false;
                }
            }
            count++;
        }
    }
    
    // 通行データの判定
    private int setMoveData(int moveX, int moveY, int offX, int offY, int count, int moveData[][], boolean pathData[][]) {
        int x,y;
        x = moveX + offX;
        y = moveY + offY;
        
        if (x >= 0 && x < cellx && y >= 0 && y < celly) {
            if (moveData[x][y] == 0 && pathData[x][y] != Common.AREA_NO) {
                moveData[x][y] = count + 1;
                return 1;
            }
        }
        return 0;
    }
    
    // 通行データの初期化
    private void setMoveDataClear(int moveData[][]) {
        for (int x = 0 ; x < cellx ; x++) {
            for (int y = 0 ; y < celly ; y++) {
                moveData[x][y] = 0;
            }
        }
    }

    // エネミー配置データの初期化
    public void setEnemyDataClear(boolean enemyData[][]) {
        for (int x = 0 ; x < cellx ; x++) {
            for (int y = 0 ; y < celly ; y++) {
                enemyData[x][y] = false;
            }
        }
    }
    
    // 仮想通行データのセット
    public void setVirtualData(int moveData[][], boolean pathData[][]) {
        for (int x = 0; x < cellx; x++) {
            for (int y = 0 ; y < celly ; y++) {
                this.virtualMoveData[x][y] = moveData[x][y];
                this.virtualPathData[x][y] = pathData[x][y];
            }
        }
    }

    public int getAreaData(int x, int y) {
        if (x >= 0 && x < cellx && y >= 0 && y < celly) {
            return areaData[x][y];
        }
        return 999;
    }

    public boolean getPathData(int x, int y) {
        if (x >= 0 && x < cellx && y >= 0 && y < celly) {
            return pathData[x][y];
        }
        return false;
    }
    
    public boolean getEnemyData(int x, int y) {
        if (x >= 0 && x < cellx && y >= 0 && y < celly) {
            return enemyData[x][y];
        }
        return false;
    }
    
    public void setAreaData(int areaData, int x, int y) {
        this.areaData[x][y] = areaData;
    }

    public void setPathData(boolean pathData, int x, int y) {
        this.pathData[x][y] = pathData;
    }

    public void setEnemyData(boolean enemyData, int x, int y) {
        this.enemyData[x][y] = enemyData;
    }
    
    public void setVirtualAreaData(int areaData, int x, int y) {
        this.virtualAreaData[x][y] = areaData;
    }

    public void setVirtualPathData(boolean pathData, int x, int y) {
        this.virtualPathData[x][y] = pathData;
    }
    
    public int getStatusData(int x, int y) {
        if (x >= 0 && x < cellx && y >= 0 && y < celly) {
            return statusData[x][y];
        }
        return 999;
    }

    public void setStatusData(int statusData, int x, int y) {
        this.statusData[x][y] = statusData;
    }
    
    public int getAnimationCount(int x, int y) {
        if (x >= 0 && x < cellx && y >= 0 && y < celly) {
            return animationCount[x][y];
        }
        return 999;
    }

    public void setAnimationCount(int animationCount, int x, int y) {
        this.animationCount[x][y] = animationCount;
    }
    
    public int getAnimationChange(int x, int y) {
        if (x >= 0 && x < cellx && y >= 0 && y < celly) {
            return animationChange[x][y];
        }
        return 999;
    }

    public void setAnimationChange(int animationChange, int x, int y) {
        this.animationChange[x][y] = animationChange;
    }
    
    public int getAnimationChangeCount(int x, int y) {
        if (x >= 0 && x < cellx && y >= 0 && y < celly) {
            return animationChangeCount[x][y];
        }
        return 999;
    }

    public void setAnimationChangeCount(int animationChangeCount, int x, int y) {
        this.animationChangeCount[x][y] = animationChangeCount;
    }
    
    public int getAnimationChangeCountMax(int x, int y) {
        if (x >= 0 && x < cellx && y >= 0 && y < celly) {
            return animationChangeCountMax[x][y];
        }
        return 999;
    }

    public void setAnimationChangeCountMax(int animationChangeCountMax, int x, int y) {
        this.animationChangeCountMax[x][y] = animationChangeCountMax;
    }
    
    public int getImageData(int x, int y) {
        if (x >= 0 && x < cellx && y >= 0 && y < celly) {
            return imageData[x][y];
        }
        return 999;
    }

    public void setImageData(int imageData, int x, int y) {
        this.imageData[x][y] = imageData;
    }
    
    public int getMoveData(int x, int y) {
        if (x >= 0 && x < cellx && y >= 0 && y < celly) {
            return moveData[x][y];
        }
        return 999;
    }
    
    public void imageSizeSet(Bitmap image, int x, int y) {
        int sx = image.getWidth() / (this.getAnimationChangeCountMax(x, y) + 1);
        int sy = image.getHeight();
        this.sizeX = sx;
        this.sizeY = sy;
        this.dispX = sx * getAnimationChangeCount(x, y);
        this.dispY = 0;
        this.dispSizeX = sx;
        this.dispSizeY = sy;
        this.dispHarfSizeX = dispSizeX / 2;
        this.dispHarfSizeY = dispSizeY / 2;
    }


    public int[][] getMoveData() {
        return moveData;
    }

    public int[][] getAreaData() {
        return areaData;
    }

    public boolean[][] getPathData() {
        return pathData;
    }

    public boolean[][] getEnemyData() {
        return enemyData;
    }

    public int[][] getVirtualMoveData() {
        return virtualMoveData;
    }

    public int[][] getVirtualAreaData() {
        return virtualAreaData;
    }

    public boolean[][] getVirtualPathData() {
        return virtualPathData;
    }

    public int getEnemybaseX(int baseno) {
        return enemybaseX[baseno];
    }

    public void setEnemybaseX(int enemybaseX, int baseno) {
        this.enemybaseX[baseno] = enemybaseX;
    }

    public int getEnemybaseY(int baseno) {
        return enemybaseY[baseno];
    }

    public void setEnemybaseY(int enemybaseY, int baseno) {
        this.enemybaseY[baseno] = enemybaseY;
    }

    public int getEnemybaseType(int baseno) {
        return enemybaseType[baseno];
    }

    public void setEnemybaseType(int baseno, int enemybaseType) {
        this.enemybaseType[baseno] = enemybaseType;
    }
    
    public int getMybaseX() {
        return mybaseX;
    }

    public void setMybaseX(int mybaseX) {
        this.mybaseX = mybaseX;
    }

    public int getMybaseY() {
        return mybaseY;
    }

    public void setMybaseY(int mybaseY) {
        this.mybaseY = mybaseY;
    }

    public int getSizeX() {
        return sizeX;
    }

    public void setSizeX(int sizeX) {
        this.sizeX = sizeX;
    }

    public int getSizeY() {
        return sizeY;
    }

    public void setSizeY(int sizeY) {
        this.sizeY = sizeY;
    }

    public float getDispSizeX() {
        return dispSizeX;
    }

    public void setDispSizeX(float dispSizeX) {
        this.dispSizeX = dispSizeX;
    }

    public float getDispSizeY() {
        return dispSizeY;
    }

    public void setDispSizeY(float dispSizeY) {
        this.dispSizeY = dispSizeY;
    }

    public float getDispHarfSizeX() {
        return dispHarfSizeX;
    }

    public void setDispHarfSizeX(float dispHarfSizeX) {
        this.dispHarfSizeX = dispHarfSizeX;
    }

    public float getDispHarfSizeY() {
        return dispHarfSizeY;
    }

    public void setDispHarfSizeY(float dispHarfSizeY) {
        this.dispHarfSizeY = dispHarfSizeY;
    }

    public int getCellx() {
        return cellx;
    }

    public void setCellx(int cellx) {
        this.cellx = cellx;
    }

    public int getCelly() {
        return celly;
    }

    public void setCelly(int celly) {
        this.celly = celly;
    }

    public int getCanvasXAdjustMIN() {
        return canvasXAdjustMIN;
    }

    public void setCanvasXAdjustMIN(int canvasXAdjustMIN) {
        this.canvasXAdjustMIN = canvasXAdjustMIN;
    }

    public int getCanvasXAdjustMAX() {
        return canvasXAdjustMAX;
    }

    public void setCanvasXAdjustMAX(int canvasXAdjustMAX) {
        this.canvasXAdjustMAX = canvasXAdjustMAX;
    }

    public int getCanvasYAdjustMIN() {
        return canvasYAdjustMIN;
    }

    public void setCanvasYAdjustMIN(int canvasYAdjustMIN) {
        this.canvasYAdjustMIN = canvasYAdjustMIN;
    }

    public int getCanvasYAdjustMAX() {
        return canvasYAdjustMAX;
    }

    public void setCanvasYAdjustMAX(int canvasYAdjustMAX) {
        this.canvasYAdjustMAX = canvasYAdjustMAX;
    }

    public int getEnemybaseMax() {
        return enemybaseMax;
    }

    public void setEnemybaseMax(int enemybaseMax) {
        this.enemybaseMax = enemybaseMax;
    }

    public int getNumberImageNo() {
        return numberImageNo;
    }

    public void setNumberImageNo(int numberImageNo) {
        this.numberImageNo = numberImageNo;
    }

    public int getIconImageNo() {
        return iconImageNo;
    }

    public void setIconImageNo(int iconImageNo) {
        this.iconImageNo = iconImageNo;
    }

    public int getDispOffSizeX() {
        return dispOffSizeX;
    }

    public void setDispOffSizeX(int dispOffSizeX) {
        this.dispOffSizeX = dispOffSizeX;
    }

    public int getDispOffSizeY() {
        return dispOffSizeY;
    }

    public void setDispOffSizeY(int dispOffSizeY) {
        this.dispOffSizeY = dispOffSizeY;
    }

    public int getDifficulty() {
        return difficulty;
    }

    public void setDifficulty(int difficulty) {
        this.difficulty = difficulty;
    }

    public int getDispX() {
        return dispX;
    }

    public void setDispX(int dispX) {
        this.dispX = dispX;
    }

    public int getDispY() {
        return dispY;
    }

    public void setDispY(int dispY) {
        this.dispY = dispY;
    }

    public int getBossNo() {
        return bossNo;
    }

    public void setBossNo(int bossNo) {
        this.bossNo = bossNo;
    }

    public int getBossbaseX() {
        return bossbaseX;
    }

    public void setBossbaseX(int bossbaseX) {
        this.bossbaseX = bossbaseX;
    }

    public int getBossbaseY() {
        return bossbaseY;
    }

    public void setBossbaseY(int bossbaseY) {
        this.bossbaseY = bossbaseY;
    }

    public int getBgmBattle() {
        return bgmBattle;
    }

    public void setBgmBattle(int bgmBattle) {
        this.bgmBattle = bgmBattle;
    }

    public int getBgmBoss() {
        return bgmBoss;
    }

    public void setBgmBoss(int bgmBoss) {
        this.bgmBoss = bgmBoss;
    }

    public List<StageEffectObject> getStageEffectlist() {
        return StageEffectlist;
    }

    public void setStageEffectlist(List<StageEffectObject> stageEffectlist) {
        StageEffectlist = stageEffectlist;
    }

    public int getCanvasX() {
        return canvasX;
    }

    public void setCanvasX(int canvasX) {
        this.canvasX = canvasX;
    }

    public int getCanvasY() {
        return canvasY;
    }

    public void setCanvasY(int canvasY) {
        this.canvasY = canvasY;
    }
}
